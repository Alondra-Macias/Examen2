ORG 0000H
JMP INIT

ORG 0003H ;INTERRUPCION PARA SEND
JMP EXT0

ORG 000BH	;TIMER PARA DELAY
JMP TIM0

ORG 0013H ;INTERRUPCION DEL TECLADO MATRICIAL
JMP EXT1

ORG 002BH
CLR TF2
JMP TIM2


/*RENOMBRAMIENTOS*/
RS EQU P3.5
RW	EQU P3.6
E	EQU	P3.7
DBUS EQU P2
KEY EQU P0
ALT EQU P3.4
	
/*DIRECCIONES TIMER 2*/
T2CON EQU 00C8H
RCAP2L EQU 00CAH
RCAP2H EQU 00CBH
TL2 EQU 00CCH
TH2 EQU 00CDH
TF2 EQU 00CFH
TR2 EQU 0CAH
	
/*VARIABLES*/
WAIT50 EQU 40H		;BANDERA 
CUENTA200 EQU 41H	;VARIABLE PARA CONTAR 200 VECES
AAUX EQU 42H		;AUXILIAR PARA ALMACENAR A
ASCII EQU 43H		;ALMACENA EL VALOR ASCII CUANDO SE PRESIONA ALT
AAUX_2 EQU 44H		;AUXILIAR 2 PARA ALMACENAR A
CURSOR_POS EQU R0	;GUARDA LA POSICION DEL CURSOR(de 80H a 8F y de C0 a CF)
AAUX_3 EQU 45H		;AUXILIAR PARA ACUMULADOR
AAUX_4 EQU 46H		;AUXILIAR PARA ACUMULADOR
LCD_LLENO EQU 47H	;BANDERA PARA INDICAR QUE LA PANTALLA ESTA LLENA
ASCII_COUNT EQU 48H	
SEND_POS EQU R1		;POSICION EN MEMORIA DEL DATO QUE SE ESTA ENVIANDO
ACTUAL_POS EQU 49H	;ES IGUAL A LA POSICION DEL CURSOR
CUENTA20 EQU 4AH

/* VARIABLES EXAMEN 2*/
PRECIO EQU 10H
TANQUEH EQU 11H
TANQUEL EQU 12H
CLIENT_CEN EQU 13H
CLIENT_DEC EQU 14H
CLIENT_UNI EQU 15H
NO_DATO EQU 16H
GETTING_DINERO EQU 17H
LITROS EQU 18H
SIN_DINERO EQU 19H




INIT:
	MOV SP, #50H
	
	MOV IE, #10100111B
	MOV IP, #00000010B
	MOV TCON, #00000101B
	MOV SCON, #01000010B
	MOV TMOD, #00100010B
	MOV TH0, #-250
	MOV TL0, #-250	
	MOV TH1, #(-3)
	MOV TL1, #(-3)
	
	MOV RCAP2H, #HIGH(-50000); CUENTE 500uS PARTE ALTA
	MOV RCAP2L, #LOW(-50000)
	MOV TH2, #HIGH(-50000)
	MOV TL2, #LOW(-50000)
	MOV T2CON, #00000000B	

	MOV DPTR, #1000H
	MOV CURSOR_POS, #80H
	ACALL DELAY_50MS		
	
	SETB E
	CLR RS
	CLR RW
	
	MOV LITROS, #00H
	MOV PRECIO, #(10)
	
	MOV TANQUEH, #HIGH(50000)
	MOV TANQUEL, #LOW(50000)
	
	ACALL INIT_DISPLAY			
	ACALL GET_DINERO
	
	JUAS:
	ACALL DESPACHA_LITRO
	JMP JUAS
	
	JMP $




TIM0:	
		 
	 RETI

TIM2:

	CLR WAIT50	
	
	RETI

EXT1:	 
	 
	MOV A, KEY			;TOMA EL NUMERO DEL TECLADO
	
	JNB GETTING_DINERO,	SIG_ESTADO 
	INC NO_DATO
	
	SIG_ESTADO:
	

	FIN_EXT1:	 
	RETI
	 




EXT0:	
	ACALL SEND_ALL
	
	RETI
	

/*SUBRUTINAS*/
DELAY_50MS:
	
	SETB TR2
	SETB WAIT50	
	
	JB WAIT50, $
		
	CLR TR2
	RET


INIT_DISPLAY:
	MOV DBUS, #38H
	ACALL EXECUTE_E
	
	MOV DBUS, #38H
	ACALL EXECUTE_E
	
	MOV DBUS, #01H
	ACALL EXECUTE_E
	
	MOV DBUS, #0FH
	ACALL EXECUTE_E	
	
	RET


EXECUTE_E:
	CPL E	
	CPL E
	ACALL DELAY_50MS
	RET

ESCRIBE_DATO:
	SETB RS
	ACALL EXECUTE_E
	CLR RS
	MOV @CURSOR_POS, DBUS
	RET

HEX_ASCII:
	MOVC A, @A + DPTR
	RET

SALTO_LINEA:	
	MOV CURSOR_POS, #0C0H
	MOV DBUS, #0C0H
	ACALL EXECUTE_E
	RET

BORRAR_PANTALLA:
	MOV CURSOR_POS, #80H
	CLR LCD_LLENO
	MOV DBUS, #01H
	ACALL EXECUTE_E
	RET

CHECK_LINE:	;REVISA LOS SALTOS DE RENGLÓN
		INC CURSOR_POS
	PRIMERA:
		CJNE CURSOR_POS, #90H, SEGUNDA	;VERIFICA SI YA LLEGÓ AL FINAL DEL PRIMER RENGLÓN
		ACALL SALTO_LINEA				;SALTA AL SIGUIENTE RENGLON
		JMP FIN_CHECK_LINE					
	SEGUNDA:
		CJNE CURSOR_POS, #0D0H, FIN_CHECK_LINE	;VERIFICA SI YA LLEGÓ AL FINAL DEL SEGUNDO RENGLÓN	
		SETB LCD_LLENO							;LEVANTA LA BANDERA AVISANDO QUE LA PANTALLA ESTA LLENA
	FIN_CHECK_LINE:		
		RET

SEND_ALL: ;ENVÍA TODOS LOS DATOS DE LA PANTALLA POR SERIAL

	SETB TI		;INICIALIZA BANDERA (ESTA LISTO PARA ENVIAR)
	SETB TR1	;PONE A CONTAR EL TIMER 1
	MOV A, #80H	;MUEVE LA DIRECCIÓN INICIAL
	MOV ACTUAL_POS, CURSOR_POS 
	INC ACTUAL_POS
	
	ENVIA:
		JNB TI, $	;ESPERA HASTA QUE ENVIA EL DATO	
		
		CJNE A, #90H, NO_SALTO	;CHECA SI NO SE HA PASADO DEL PRIMER RENGLÓN
		SALTO:
		MOV A, #0C0H	;SE MUEVE AL INICIO DEL SEGUNDO RENGLÓN
		
		NO_SALTO:
		MOV SEND_POS, A	
		CPL TI					;ESTA LISTO PARA ENVIAR
		MOV SBUF, @SEND_POS		;ENVIA EL DATO QUE CONTIENE LA DIRECCIÓN QUE ESTA ENVIANDO
		INC A					;SE MUEVE A LA SIGUIENTE DIRECCIÓN
		CJNE A, ACTUAL_POS, ENVIA	;CHECA SI YA ENVIO TODO
		
	FIN_SEND: 
	SETB TI		;TERMINA DE ENVIAR Y QUEDA EN ESPERA
	CLR TR1		;TIMER 1 DEJA DE CONTAR
	RET
	
	
GET_DINERO: ;IMPRIME EL SIMBOLO $ EN EL LCD Y CAPTURA LOS 3 DIGITOS DE LA CANTIDAD DE DINERO (UNI, DEC, CEN)
	MOV DBUS, #24H
	ACALL ESCRIBE_DATO
	
	SETB GETTING_DINERO
	
	FIRST:
		MOV A, NO_DATO
		CJNE A, #01, FIRST
		MOV CLIENT_CEN, KEY
		MOV A, KEY
		ACALL HEX_ASCII
		MOV DBUS, A
		ACALL ESCRIBE_DATO
	
	SECOND:
		MOV A, NO_DATO
		CJNE A, #02, SECOND
		MOV CLIENT_DEC, KEY
		MOV A, KEY
		ACALL HEX_ASCII
		MOV DBUS, A
		ACALL ESCRIBE_DATO
	
	THIRD:
		MOV A, NO_DATO
		CJNE A, #03, THIRD
		MOV CLIENT_UNI, KEY
		MOV A, KEY
		ACALL HEX_ASCII
		MOV DBUS, A
		ACALL ESCRIBE_DATO

	FIN_GET_DINERO:
	CLR GETTING_DINERO
	RET



RESTA_DINERO: ;RESTA 1 AL DINERO DEL CLIENTE GUARDADO EN CLIENT_UNI,CLIENT_DEC Y CLIENT_CEN
	MOV AAUX, A
	
	MOV A, CLIENT_UNI
	CJNE A, #00H, UNIDADES
	MOV A, CLIENT_DEC
	CJNE A, #00H, UNIDADES
	MOV A, CLIENT_CEN
	CJNE A, #00H, UNIDADES
	SETB SIN_DINERO
	JMP FIN_RESTA_DINERO
	
	UNIDADES:
		DEC CLIENT_UNI
		MOV A, CLIENT_UNI
		CJNE A, #0FFH, FIN_RESTA_DINERO
		MOV CLIENT_UNI, #09H
	
	DECENAS:
		DEC CLIENT_DEC
		MOV A, CLIENT_DEC
		CJNE A, #0FFH, FIN_RESTA_DINERO
		MOV CLIENT_DEC, #09H
	
	CENTENAS:
		DEC CLIENT_CEN
		MOV A, CLIENT_CEN
		CJNE A, #0FFH, FIN_RESTA_DINERO
		MOV CLIENT_CEN, #09H
		
	FIN_RESTA_DINERO:
	MOV A, AAUX
	RET



RESTA_LITRO:
	
	BAJA:
	DEC TANQUEL
	MOV A, TANQUEL
	CJNE A, #0FFH, FIN_RESTA_LITRO
	MOV TANQUEL, #00H
	
	ALTA:
	DEC TANQUEH
	MOV A, TANQUEH
	CJNE A, #0FFH, FIN_RESTA_LITRO
	MOV TANQUEH, #HIGH(50000)
	MOV TANQUEL, #LOW(50000)

	FIN_RESTA_LITRO:
	RET
	
	
DESPACHA_LITRO:
	
	MOV A, #00H
	

	LOOP:
		CJNE A, PRECIO, OPERACION
		JMP HANDLE_LITRO
		OPERACION:
		INC A
		ACALL RESTA_DINERO
		JB SIN_DINERO, FIN_DESPACHA_LITRO
		JMP LOOP
	
	HANDLE_LITRO:
		ACALL RESTA_LITRO
		INC LITROS
	
	
	FIN_DESPACHA_LITRO:
	RET
	
	
	
ORG 1000H
	
DB '0'
DB '1'
DB '2'
DB '3'
DB '4'
DB '5'
DB '6'
DB '7'
DB '8'
DB '9'

	
END
